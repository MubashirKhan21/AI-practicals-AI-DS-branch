def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False
        
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
        
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
        
    return True

def solve_n_queens_backtracking(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    solutions = []
    
    def backtrack(col):
        if col >= n:
            solutions.append([row[:] for row in board])
            return
        
        for i in range(n):
            if is_safe(board, i, col, n):
                board[i][col] = 1
                backtrack(col + 1)
                board[i][col] = 0
    
    backtrack(0)
    return solutions

# Example usage
n = 8
solutions = solve_n_queens_backtracking(n)
print(f"Total solutions for {n}-Queens: {len(solutions)}")
